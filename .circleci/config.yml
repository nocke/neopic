# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@5.0
  gh: circleci/github-cli@2.3.0

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  neopic-workflow:
    jobs:
      - create-mock:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(circleci|release)-.*/
      # - build-linux:
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(circleci|release)-.*/
      # - build-macos:
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(circleci|release)-.*/
      # - build-windows:
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(circleci|release)-.*/
      - create-release:
          requires:
            - create-mock
            # - build-linux
            # - build-macos
            # - build-windows
          filters:
            branches:
              ignore: /
            tags:
              only: /^release-.*/

# Reuse a sequence of steps
# See: https://circleci.com/docs/configuration-reference/#workflows
commands:
  steps-before:
    steps:
      - run:
          name: release-build on github ONLY
          command: |
            if [[ "$CIRCLE_TAG" == release-* && "$CIRCLE_IS_GITHUB" != "true" ]]; then
              echo "release-tag shall run only on github. skipping on bitbucket."
              circleci-agent step halt
            fi
            echo "proceeding with circleci run"
      # note: checkout must be before mkdir, mkdir must be before sanity test 😬
      - checkout
      - run: mkdir -p ./out/make ./out/junit
      - run:
          name: sanity test
          command: |
            echo "pwd: $PWD   node version: $(node --version)  shell: $SHELL   uname: $(uname)"
  steps-after:
    steps:
      - store_artifacts:
          path: out/make
      - run:
          name: persist on tag release ONLY
          command: |
            if [[ "$CIRCLE_TAG" != release-* ]]; then
              echo "github release only with tag release-*. thus ending here for $CIRCLE_TAG."
              circleci-agent step halt
            fi
            echo 'export RELEASE_VERSION_NUMBER="${CIRCLE_TAG#release-}"' >> "$BASH_ENV"
            echo "proceeding with release on github"
      - persist_to_workspace:
          root: .
          paths:
            - out/make

# Jobs to be invoked in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  create-mock:
    docker:
      - image: cimg/node:20.10.0
    steps:
    - run: |
        mkdir -pv \
        "./out/make/deb/x64" \
        "./out/make/rpm/x64" \
        "./out/make/squirrel.windows/x64" \
        "./out/make/zip/darwin/x64" \
        "./out/make/squirrel.windows/x64"
    - run: find ./out -type d
    - run: echo "MOCK ARTIFACT" > "./out/make/deb/x64/neopic_0.13.0_amd64.deb"
    - run: echo "MOCK ARTIFACT" > "./out/make/rpm/x64/neopic-0.13.0-1.x86_64.rpm"
    - run: echo "MOCK ARTIFACT" > "./out/make/zip/darwin/x64/neopic-darwin-x64-0.13.0.zip"
    - run: echo "MOCK ARTIFACT" > "./out/make/squirrel.windows/x64/neopic-0.13.0 Setup.exe"
    - run: echo "MOCK ARTIFACT" > "./out/make/squirrel.windows/x64/neopic-0.13.0-full.nupkg"
    - persist_to_workspace:
        root: .
        paths:
          - out/make

  build-linux:
    docker:
      - image: cimg/node:20.10.0
    steps:
      - steps-before
      - restore_cache:
          key: dependency-B-linux-{{ checksum "package.json" }}
      - run: npm install
      - run: npm run test:ci
      - store_test_results:
          path: out/junit
      - run:
          name: Install OS specific
          command: |
            sudo apt-get update -y
            # rpm only needed for MakerRpm
            sudo apt-get install -y dpkg fakeroot rpm
            # all of these only needed for running (in selftest)
            sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 libatspi2.0-0 libdrm2 libgbm1 libasound2 libcups2 libatk1.0-0 libatk-bridge2.0-0 xvfb
            # reduce dbus warning on linux selftest
            sudo apt-get install -y dbus
            sudo dbus-uuidgen --ensure
            sudo service dbus start
      - save_cache:
          key: dependency-B-linux-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: npm run make
      - run:
          name: List store_artifacts
          command: ls -lR ./out
      - run:
          name: start mock display
          background: true
          command: Xvfb :99 -screen 0 1920x1080x24
      - run:
          name: electron selftest (linux)
          command: |
            export DISPLAY=:99
            ./out/neopic-linux-x64/neopic -selftest --disable-gpu
            exitcode=$?
            if [ $exitcode -ne 0 ]; then
              echo "Failure or exit with code $exitcode"
              exit $exitcode
            fi
            echo "selftest success"
      - steps-after

  build-macos:
    macos:
      xcode: 15.1.0
    steps:
      - run: xcodebuild -version
      - steps-before
      - restore_cache:
          key: dependency-B-macos-{{ checksum "package.json" }}
      - run: npm install
      - run: npm run test:ci
      - store_test_results:
          path: out/junit
      - run:
          name: Install dpkg and fakeroot
          command: |
            brew update
            brew install dpkg fakeroot
      - save_cache:
          key: dependency-B-macos-{{ checksum "package.json" }}
          paths:
          - ./node_modules
      - run: npm run make
      - run:
          name: List store_artifacts
          command: ls -lR ./out
      - run:
          name: electron selftest (mac)
          command: |
            ./out/neopic-darwin-x64/neopic.app/Contents/MacOS/neopic -selftest
            exitcode=$?
            if [ $exitcode -ne 0 ]; then
              echo "Failure or exit with code $exitcode"
              exit $exitcode
            fi
            echo "selftest success"
      - steps-after

  build-windows:
    executor:
      name: win/default
      shell: bash
    steps:
      - steps-before
      - restore_cache:
          key: dependency-C-windows-{{ checksum "package.json" }}
      - run: npm install
      - store_test_results:
          path: out/junit
      - save_cache:
          key: dependency-C-windows-{{ checksum "package.json" }}
          paths:
          - ./node_modules
      - run: npm run make
      - run:
          name: List store_artifacts
          command: ls -lR ./out
      - run:
          name: electron.exe selftest (win)
          command: |
            ./out/neopic-win32-x64/neopic.exe -selftest
            exitcode=$?
            if [ $exitcode -ne 0 ]; then
              echo "Failure or exit with code $exitcode"
              exit $exitcode
            fi
            echo "selftest success"
      - steps-after

  create-release:
    docker:
      - image: cimg/node:20.10.0
    steps:
      - checkout # CHANGELOG.md and `gh release create` need checkout
      - gh/install
      - attach_workspace:
          at: ./artifacts
      - run:
          name: update changelog # pull from (multi-line) description of label
          command: |
            TAG_MESSAGE=$(git tag -n10 --format='%(contents)' "${CIRCLE_TAG}")
            #prepend last tag message to CHANGELOG.md
            echo -e "## [${CIRCLE_TAG#release-}] - $(date +'%Y-%m-%d')\n${TAG_MESSAGE}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md

            echo -e "\n\n⚠️ Please ignore the Source Code files \(`Source code\(zip\), Source code \(tar.gz\)`\)\n" > RELEASE_NOTES_TEMP.txt
            echo -e "<sub><sup>github [insists on creating them, for no good reason](https://github.com/orgs/community/discussions/6003).</sup></sub>\n" >> RELEASE_NOTES_TEMP.txt

            git config --global user.email "git@nocke.de"
            git config --global user.name "Frank Nocke"
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG for ${CIRCLE_TAG}" || echo "No changes to commit"

            # since checkout unattached, grab branch name for current tag (sanitize, trim whitespace)
            BRANCH_NAME=$(git branch -r --contains tags/$CIRCLE_TAG | grep -v HEAD | sed 's/origin\///;s/^\s*//;s/\s*$//' | head -n 1)
            git push origin HEAD:$BRANCH_NAME
      - run:
          name: create release
          command: |
            ARTIFACTS_BASE="./artifacts/out/make"
            find $ARTIFACTS_BASE -type f -name '* *' -exec bash -c 'mv "$0" "${0// /_}"' {} \;

            find $ARTIFACTS_BASE -type f \( -name '*.rpm' -o -name '*.deb' \) -exec bash -c 'mv "$0" "${0%/*}/LINUX_${0##*/}"' {} \;
            find $ARTIFACTS_BASE -type f \( -name '*.exe' -o -name '*.nupkg' \) -exec bash -c 'mv "$0" "${0%/*}/WIN_${0##*/}"' {} \;
            find $ARTIFACTS_BASE -type f \( -name '*.zip' -o -name '*.dmg' \) -exec bash -c 'mv "$0" "${0%/*}/MAC_${0##*/}"' {} \;

            echo "files to be released (spaces converted to underscores, platform prefixes)"
            find $ARTIFACTS_BASE -type f \( -name '*.deb' -o -name '*.rpm' -o -name '*.zip' -o -name '*.exe' -o -name '*.nupkg' \)
            ARTIFACTS=$(find $ARTIFACTS_BASE -type f \( -name '*.deb' -o -name '*.rpm' -o -name '*.zip' -o -name '*.exe' -o -name '*.nupkg' \))
            gh release create "${CIRCLE_TAG}" \
              --title "${CIRCLE_TAG#release-}" \
              --notes-file RELEASE_NOTES_TEMP.txt \
              $ARTIFACTS
